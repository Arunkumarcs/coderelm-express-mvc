#!/usr/bin/env node

/**
 * Module dependencies.
 */
module.exports = async (app) => {
  var debug = require('debug')('coderelm-express:server');
  var http = require('http');
  var appConfig = use('Config/App');
  var {Core} = use('Core/');

  /**
   * Get port from environment and store in Express.
   */
  var port = normalizePort(appConfig.port);
  app.set('port', port);

  /**
   * Create HTTP server.
   */
  var server = http.createServer(app);

  // sync() will create all table if they doesn't exist in database
  await Core.beforeServeProviders(server, app);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  console.log(`<---------------------------- Server started on port ${port} ---------------------->`)

  await Core.afterServeProviders(server);
  await Core.endProviders(server);

  /**
   * Normalize a port into a number, string, or false.
   */
  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */
  function onListening() {
    var addr = server.address();  
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  } 
};